name: LaTeX Compiler

on:
  push:
    paths: ['**.tex', '**.bib', '**.cls', '**.sty', '**.yml', '**.yaml']
  workflow_dispatch:

jobs:
  compile:
    runs-on: ubuntu-latest
    
    permissions:
      contents: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Cache TeX Live Complete
      id: cache
      uses: actions/cache@v4
      with:
        path: ~/texlive
        key: texlive-overleaf-complete-v3
    
    - name: Install Comprehensive TeX Live
      if: steps.cache.outputs.cache-hit != 'true'
      run: |
        echo "Installing comprehensive TeX Live (Overleaf-like setup)..."
        
        # Create installation directory
        mkdir -p ~/texlive-temp
        cd ~/texlive-temp
        
        # Download installer
        wget -q http://mirror.ctan.org/systems/texlive/tlnet/install-tl-unx.tar.gz
        tar -xzf install-tl-unx.tar.gz
        
        # Find and enter installer directory
        INSTALL_DIR=$(find . -name "install-tl-2*" -type d | head -1)
        cd "$INSTALL_DIR"
        
        # Create comprehensive installation profile
        cat > texlive.profile << 'EOF'
        selected_scheme scheme-medium
        TEXDIR ~/texlive/2023
        TEXMFCONFIG ~/texlive/2023/texmf-config
        TEXMFHOME ~/texlive/2023/texmf
        TEXMFLOCAL ~/texlive/2023/texmf-local
        TEXMFSYSCONFIG ~/texlive/2023/texmf-config
        TEXMFSYSVAR ~/texlive/2023/texmf-var
        TEXMFVAR ~/texlive/2023/texmf-var
        option_adjustrepo 1
        option_autobackup 1
        option_desktop_integration 0
        option_doc 0
        option_file_assocs 0
        option_fmt 1
        option_letter 0
        option_menu_integration 0
        option_path 0
        option_post_code 1
        option_src 0
        option_sys_bin ~/texlive/2023/bin
        option_sys_info ~/texlive/2023/share/info
        option_sys_man ~/texlive/2023/share/man
        option_w32_multi_user 0
        EOF
        
        # Install comprehensive scheme
        ./install-tl -profile texlive.profile
        
        # Install additional collections for complete coverage
        echo "Installing comprehensive package collections..."
        ~/texlive/2023/bin/x86_64-linux/tlmgr install \
          collection-latexextra collection-mathscience \
          collection-pictures collection-bibtexextra \
          collection-fontsrecommended collection-publishers \
          algorithms algorithmicx algorithm2e \
          booktabs longtable supertabular xtab \
          mhchem chemfig chemmacros \
          physics hepnames hepparticles \
          circuitikz pgfgantt bchart \
          listings minted pythontex \
          siunitx units steinmetz \
          subcaption wrapfig rotating \
          enumitem paralist soul microtype \
          geometry fancyhdr titlesec appendix \
          biblatex natbib \
          babel inputenc fontenc \
          lipsum blindtext kantlipsum \
          xcolor colortbl diagbox \
          threeparttable tabu multirow \
          hyperref url footmisc \
          amsmath amssymb amsthm mathtools \
          bm cancel nccmath empheq \
          tikz pgfplots pgfplotstable \
          float caption graphicx \
          comment verbatim calc xspace \
          datetime ifthen
        
        echo "TeX Live comprehensive installation completed!"
        echo "Installed packages: $(~/texlive/2023/bin/x86_64-linux/tlmgr list --only-installed | wc -l)"
    
    - name: Setup TeX Live PATH
      run: |
        # Add TeX Live to PATH
        echo "$HOME/texlive/2023/bin/x86_64-linux" >> $GITHUB_PATH
        
        # Verify installation
        export PATH="$HOME/texlive/2023/bin/x86_64-linux:$PATH"
        which pdflatex
        pdflatex --version
        
        echo "Cache hit: ${{ steps.cache.outputs.cache-hit }}"
        if [ "${{ steps.cache.outputs.cache-hit }}" = "true" ]; then
          echo "‚úÖ Using cached comprehensive TeX Live installation!"
        else
          echo "‚úÖ Fresh comprehensive TeX Live installation completed!"
        fi
    
    - name: Enhanced LaTeX Compilation
      run: |
        export PATH="$HOME/texlive/2023/bin/x86_64-linux:$PATH"
        
        if [ ! -f "main.tex" ]; then
          echo "‚ùå Error: main.tex not found!"
          exit 1
        fi
        
        echo "üîÑ Compiling main.tex..."
        
        # First compilation attempt
        pdflatex -interaction=nonstopmode -file-line-error main.tex
        COMPILE_STATUS=$?
        
        # Check if compilation succeeded
        if [ $COMPILE_STATUS -ne 0 ] || [ ! -f "main.pdf" ]; then
          echo "‚ùå COMPILATION FAILED - ANALYZING ERRORS..."
          
          # Extract and highlight specific error types
          echo "=== ERROR SUMMARY ==="
          
          # Missing packages/files
          echo "üì¶ Missing Packages/Files:"
          grep -n "LaTeX Error.*not found\|Package.*not found\|File.*not found" main.log | head -10 || echo "  None found"
          
          # Undefined commands
          echo -e "\nüîç Undefined Commands:"
          grep -n "Undefined control sequence\|LaTeX Error.*undefined" main.log | head -10 || echo "  None found"
          
          # Math errors
          echo -e "\nüî¢ Math Mode Issues:"
          grep -n "Missing.*math\|Extra.*math\|Math mode" main.log | head -10 || echo "  None found"
          
          # Citation/reference errors  
          echo -e "\nüìö Reference/Citation Issues:"
          grep -n "Reference.*undefined\|Citation.*undefined" main.log | head -10 || echo "  None found"
          
          # General LaTeX errors with line numbers
          echo -e "\nüö® Critical Errors:"
          grep -n -A1 "^!.*\|LaTeX Error\|Error:" main.log | head -20 || echo "  None found"
          
          # Show problematic lines from source if available
          echo -e "\nüìù SOURCE CONTEXT FOR ERRORS:"
          ERROR_LINES=$(grep -o "main.tex:[0-9]*" main.log | head -5)
          if [ ! -z "$ERROR_LINES" ]; then
            echo "$ERROR_LINES" | while read error_line; do
              line_num=$(echo $error_line | cut -d: -f2)
              echo "--- Around line $line_num in main.tex ---"
              sed -n "$((line_num-2)),$((line_num+2))p" main.tex | nl -v$((line_num-2)) 2>/dev/null || echo "Could not display context"
              echo ""
            done
          else
            echo "  No line numbers found in errors"
          fi
          
          # Final attempt with more verbosity
          echo "üîÑ Attempting recompilation with detailed error reporting..."
          pdflatex -interaction=errorstopmode -halt-on-error main.tex 2>&1 | tail -20 || true
          
          echo -e "\nüìã FULL LOG TAIL (last 30 lines for context):"
          tail -30 main.log
          
          exit 1
        fi
        
        # Success case
        echo "‚úÖ COMPILATION SUCCESSFUL!"
        PDF_SIZE=$(stat -c%s main.pdf 2>/dev/null || stat -f%z main.pdf 2>/dev/null || echo "unknown")
        echo "üìÑ Generated: main.pdf ($PDF_SIZE bytes)"
        
        # Show warnings if any
        if grep -q "Warning" main.log; then
          echo "‚ö†Ô∏è  WARNINGS FOUND (first 5):"
          grep -n "Warning" main.log | head -5
        fi
        
        # Show compilation summary
        PAGES=$(pdfinfo main.pdf 2>/dev/null | grep "Pages:" | awk '{print $2}' || echo "unknown")
        echo "üìä Document: $PAGES pages"
    
    - name: Commit PDF
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "LaTeX Compiler"
        
        git add main.pdf
        
        if ! git diff --staged --quiet; then
          git commit -m "Auto-compile LaTeX: $(date '+%Y-%m-%d %H:%M:%S')"
          git push
          echo "üì§ PDF committed successfully!"
        else
          echo "‚ÑπÔ∏è  No changes to commit"
        fi
